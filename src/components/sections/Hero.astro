---
/**
 * Hero.astro - Premium SaaS Landing Page z efektem parallax
 * Inspirowany: Galaxy SaaS Template
 */

import AnimatedText from '../ui/AnimatedText.astro';
import BizbeesLogo from '../ui/BizbeesLogo.astro';
import { createI18nInstance } from '../../i18n/i18next';
import type { Locale } from '../../i18n/config';

interface Props {
  lang: Locale;
  translations: {
    hero: any;
    navigation: any;
  };
}

const { lang, translations } = Astro.props as Props;
---

<div class="landing-page">
  <!-- Hero Section -->
  <section class="hero-section">
    <div class="hero-bg">
      <div class="bg-gradient"></div>
      <div class="bg-grid"></div>
    </div>

    <div class="hero-container">
      <div class="update-badge light-render-badge">
        <svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
        <span>{translations.hero.badge}</span>
      </div>

        <h1 class="hero-title">
        <span class="title-highlight">{translations.hero.title.split(' ')[0]}</span><br class="mobile-break" /> {translations.hero.title.split(' ').slice(1).join(' ')}
      </h1>

      <p class="hero-subtitle">
        {translations.hero.subtitle}
      </p>

      <div class="hero-cta">
        <button class="btn-primary">
          {translations.hero.primaryCta}
          <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
          </svg>
        </button>
        <button class="btn-secondary">
          <svg class="play-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
          </svg>
          {translations.hero.secondaryCta}
        </button>
      </div>

      <!-- Desktop Mockup -->
      <div class="app-mockup desktop-mockup">
        <div class="mockup-glow"></div>
        <div class="app-window">
          <!-- Top Bar -->
          <div class="app-topbar">
            <div class="topbar-left">
              <div class="workspace-selector">
                <div class="workspace-icon">M</div>
                <div class="skeleton-text skeleton-sm"></div>
              </div>
              <div class="breadcrumbs">
                <div class="skeleton-text skeleton-xs"></div>
              </div>
            </div>
            <div class="topbar-center">
              <div class="search-box">
                <div class="skeleton-text skeleton-md"></div>
              </div>
            </div>
            <div class="topbar-right">
              <div class="skeleton-circle"></div>
              <div class="skeleton-circle"></div>
              <div class="skeleton-circle"></div>
            </div>
          </div>

          <div class="app-content">
            <!-- Sidebar -->
            <div class="app-sidebar">
              <!-- Logo + Name -->
              <div class="sidebar-header">
                <BizbeesLogo size="md" />
                <span class="sidebar-brand">Bizbees</span>
              </div>

              <!-- MAIN Section -->
              <div class="sidebar-section">
                <div class="skeleton-text skeleton-xs"></div>
              </div>
              <div class="sidebar-items">
                <div class="skeleton-item skeleton-active"></div>
                <div class="skeleton-item"></div>
            
                <div class="skeleton-item"></div>
              </div>

              <!-- TOOLS Section -->
              <div class="sidebar-section">
                <div class="skeleton-text skeleton-xs"></div>
              </div>

              <!-- SETTINGS Section -->
              <div class="sidebar-section">
                <div class="skeleton-text skeleton-xs"></div>
              </div>

              <!-- Upgrade Button -->
              <div class="sidebar-footer">
                <div class="skeleton-item skeleton-upgrade"></div>
              </div>
            </div>

            <!-- Main Content Area -->
            <div class="app-main">
              <!-- Content Header -->
              <div class="content-header">
                <div class="feature-display" id="feature-display-1">
                  <svg class="feature-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#f59e0b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
                  <div class="feature-content">
                    <div class="feature-title">Poczta AI</div>
                    <div class="feature-description">Inteligentne zarządzanie korespondencją biznesową</div>
                  </div>
                </div>
              </div>

              <!-- Content Cards -->
              <div class="content-grid" id="content-grid">
                <div class="content-card"></div>
                <div class="content-card"></div>
              </div>

              <!-- Content Area -->
              <div class="content-area">
                <div class="skeleton-lines">
                  <div class="skeleton-line"></div>
                  <div class="skeleton-line skeleton-line-sm"></div>
                  <div class="skeleton-line"></div>
                  <div class="skeleton-line skeleton-line-lg"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Mobile Phone Mockup -->
      <div class="app-mockup mobile-mockup">
        <div class="phone-frame">
          <!-- Phone Status Bar -->
          <div class="phone-status-bar">
            <div class="status-left">
              <span class="time">9:41</span>
            </div>
            <div class="status-right">
              <div class="signal-bars">
                <div class="bar"></div>
                <div class="bar"></div>
                <div class="bar"></div>
                <div class="bar"></div>
              </div>
              <div class="battery">
                <div class="battery-level"></div>
              </div>
            </div>
          </div>

          <!-- Phone App Header -->
          <div class="phone-header">
            <div class="phone-logo">
              <BizbeesLogo size="sm" />
            </div>
            <div class="phone-title">Bizbees</div>
            <div class="phone-menu">
              <div class="menu-dot"></div>
              <div class="menu-dot"></div>
              <div class="menu-dot"></div>
            </div>
          </div>

          <!-- Phone Content -->
          <div class="phone-content">
            <!-- Mobile Feature Display -->
            <div class="mobile-feature-display" id="mobile-feature-display-1">
              <div class="mobile-feature-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#f59e0b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
              </div>
              <div class="mobile-feature-content">
                <div class="mobile-feature-title">Poczta AI</div>
                <div class="mobile-feature-description">Inteligentne zarządzanie korespondencją</div>
              </div>
            </div>

            <!-- Mobile Content Cards -->
            <div class="mobile-content-grid" id="mobile-content-grid">
              <div class="mobile-content-card">
                <div class="mobile-skeleton-content">
                  <div class="mobile-skeleton-icon">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                      <path d="M2 17l10 5 10-5"></path>
                      <path d="M2 12l10 5 10-5"></path>
                    </svg>
                  </div>
                  <div class="mobile-skeleton-text">
                    <div class="mobile-skeleton-line mobile-skeleton-title"></div>
                    <div class="mobile-skeleton-line mobile-skeleton-value mobile-skeleton-orange"></div>
                  </div>
                </div>
              </div>
              <div class="mobile-content-card">
                <div class="mobile-skeleton-content">
                  <div class="mobile-skeleton-icon">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <line x1="18" y1="20" x2="18" y2="10"></line>
                      <line x1="12" y1="20" x2="12" y2="4"></line>
                      <line x1="6" y1="20" x2="6" y2="14"></line>
                    </svg>
                  </div>
                  <div class="mobile-skeleton-text">
                    <div class="mobile-skeleton-line mobile-skeleton-title"></div>
                    <div class="mobile-skeleton-line mobile-skeleton-value"></div>
                  </div>
                </div>
              </div>
              <div class="mobile-content-card">
                <div class="mobile-skeleton-content">
                  <div class="mobile-skeleton-icon">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon>
                    </svg>
                  </div>
                  <div class="mobile-skeleton-text">
                    <div class="mobile-skeleton-line mobile-skeleton-title"></div>
                    <div class="mobile-skeleton-line mobile-skeleton-value"></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Mobile Bottom Area -->
            <div class="mobile-bottom-area">
              <div class="mobile-skeleton-lines">
                <div class="mobile-skeleton-line"></div>
                <div class="mobile-skeleton-line mobile-skeleton-line-sm"></div>
                <div class="mobile-skeleton-line"></div>
              </div>
            </div>
          </div>

          <!-- Phone Bottom Navigation -->
          <div class="phone-bottom-nav">
            <div class="nav-item active">
              <div class="nav-icon">🏠</div>
            </div>
            <div class="nav-item">
              <div class="nav-icon">📊</div>
            </div>
            <div class="nav-item">
              <div class="nav-icon">⚙️</div>
            </div>
            <div class="nav-item">
              <div class="nav-icon">👤</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>




</div>

<style>
  .landing-page {
    position: relative;
    min-height: 100vh;
  }

  .landing-page::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
    background: 
      radial-gradient(circle 1200px at 50% 40%, rgba(122, 15, 174, 0.25) 0%, rgba(122, 15, 174, 0.15) 20%, rgba(122, 15, 174, 0.08) 40%, transparent 70%),
      radial-gradient(circle 1000px at 30% 50%, rgba(35, 83, 222, 0.2) 0%, rgba(35, 83, 222, 0.12) 25%, rgba(35, 83, 222, 0.06) 50%, transparent 75%),
      radial-gradient(circle 900px at 70% 60%, rgba(218, 5, 229, 0.18) 0%, rgba(218, 5, 229, 0.1) 30%, rgba(218, 5, 229, 0.05) 50%, transparent 70%),
      radial-gradient(circle 800px at 50% 20%, rgba(62, 88, 232, 0.15) 0%, rgba(62, 88, 232, 0.08) 35%, transparent 65%),
      #0B1120;
    background-color: #0B1120;
    filter: blur(80px);
    animation: gradientFloat 20s ease-in-out infinite;
  }

  @keyframes gradientFloat {
    0%, 100% { 
      transform: translate(0, 0) scale(1); 
      opacity: 1;
    }
    25% { 
      transform: translate(30px, -20px) scale(1.15); 
      opacity: 0.9;
    }
    50% { 
      transform: translate(-20px, 30px) scale(0.95); 
      opacity: 0.85;
    }
    75% { 
      transform: translate(20px, -15px) scale(1.08); 
      opacity: 0.95;
    }
  }


  /* Hero Section */
  .hero-section {
    position: relative;
    min-height: 1500px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  /* Mniejszy odstęp od góry w orientacji poziomej */
  @media (orientation: landscape) and (max-height: 600px) {
    .hero-section {
      min-height: 100vh;
      padding-top: 2rem;
    }
    
    .hero-container {
      padding-top: 2rem;
    }
  }

  .hero-bg {
    display: none;
  }

  .bg-gradient {
    display: none;
  }

  .bg-grid {
    display: none;
  }

  .hero-container {
    position: relative;
    z-index: 1;
    max-width: 1200px;
    margin: 0 auto;
    padding: 4rem 2rem;
    text-align: center;
  }

  /* Light Render Badge */
  .light-render-badge {
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }

  .update-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 2rem;
    color: #60a5fa;
    font-size: 0.875rem;
    margin-bottom: 1.5rem;
  }

  .badge-icon {
    width: 1rem;
    height: 1rem;
  }

  /* Parallax and Section Transition Animations */
  .full-section {
    opacity: 0;
    transform: translateY(100px);
    transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .full-section.animate-in {
    opacity: 1;
    transform: translateY(0);
  }

  .section-first {
    margin-top: -200px
  }
  
  .section-first.animate-in {
    transform: translateY(0);
  }




  /* Parallax backgrounds */
  .section-bg {
    transform: translateZ(0);
    transition: transform 0.1s ease-out;
  }





  .hero-title {
    font-size: clamp(2.5rem, 6vw, 5rem);
    font-weight: 700;
    line-height: 1.1;
    color: white;
    margin-bottom: 1.5rem;
  }

  .title-highlight {
    background: linear-gradient(135deg, 
      rgb(122, 15, 174) 0%, 
      rgb(62, 88, 232) 25%,
      rgb(35, 83, 222) 50%,
      rgb(218, 5, 229) 75%,
      rgb(122, 15, 174) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    background-size: 200% auto;
    animation: gradientShift 8s ease-in-out infinite;
    filter: drop-shadow(0 0 20px rgba(122, 15, 174, 0.6))
            drop-shadow(0 0 40px rgba(218, 5, 229, 0.4))
            drop-shadow(0 0 60px rgba(62, 88, 232, 0.3));
    position: relative;
  }

  .mobile-break {
    display: none;
  }

  @keyframes gradientShift {
    0% {
      background-position: 0% center;
    }
    100% {
      background-position: 200% center;
    }
  }

  .hero-subtitle {
    font-size: clamp(0.875rem, 2.5vw, 1.25rem);
    color: rgba(255, 255, 255, 0.6);
    margin-bottom: 2.5rem;
    line-height: 1.6;
    max-width: 100%;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  .hero-cta {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .btn-primary {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border: none;
    border-radius: 0.75rem;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 30px rgba(59, 130, 246, 0.5);
  }

  .btn-secondary {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.75rem;
    color: white;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .btn-icon,
  .play-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  /* App Mockup */
  .app-mockup {
    position: relative;
    max-width: 1100px;
    margin: 0 auto;
    margin-top: 1rem;
  }

  /* Desktop Mockup - Default */
  .desktop-mockup {
    display: block;
  }

  /* Mobile Mockup - Hidden by default */
  .mobile-mockup {
    display: none;
  }

  .mockup-glow {
    position: absolute;
    inset: -80px;
    background: 
      radial-gradient(ellipse 800px 600px at 50% 50%, rgba(122, 15, 174, 0.4) 0%, rgba(35, 83, 222, 0.3) 30%, rgba(218, 5, 229, 0.2) 60%, transparent 100%);
    filter: blur(60px);
    z-index: -1;
    animation: mockupGlow 8s ease-in-out infinite;
  }

  @keyframes mockupGlow {
    0%, 100% { 
      opacity: 1;
      transform: scale(1);
    }
    50% { 
      opacity: 0.8;
      transform: scale(1.05);
    }
  }

  .app-window {
    background: rgba(15, 23, 42, 0.6);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    backdrop-filter: blur(10px);
    overflow: hidden;
  }

  /* Phone Frame Styles */
  .phone-frame {
    width: 320px;
    height: 640px;
    background: linear-gradient(
      to bottom,
      rgba(15, 23, 42, 0.8) 0%,
      rgba(15, 23, 42, 0.8) 40%,
      rgba(15, 23, 42, 0.6) 50%,
      rgba(15, 23, 42, 0.3) 60%,
      rgba(15, 23, 42, 0.1) 70%,
      rgba(15, 23, 42, 0.05) 80%,
      rgba(15, 23, 42, 0.02) 90%,
      rgba(15, 23, 42, 0) 100%
    );
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 2rem;
    backdrop-filter: blur(10px);
    overflow: hidden;
    position: relative;
    margin: 0 auto;
    box-shadow: 
      0 0 0 1px rgba(255, 255, 255, 0.05),
      0 20px 40px rgba(0, 0, 0, 0.3),
      0 0 60px rgba(0, 212, 255, 0.1);
    /* Mask dla dolnej części - sprawia że dolna część jest całkowicie przezroczysta */
    mask: linear-gradient(
      to bottom,
      black 0%,
      black 50%,
      rgba(0, 0, 0, 0.8) 70%,
      rgba(0, 0, 0, 0.4) 80%,
      rgba(0, 0, 0, 0.1) 90%,
      transparent 100%
    );
    -webkit-mask: linear-gradient(
      to bottom,
      black 0%,
      black 50%,
      rgba(0, 0, 0, 0.8) 70%,
      rgba(0, 0, 0, 0.4) 80%,
      rgba(0, 0, 0, 0.1) 90%,
      transparent 100%
    );
  }

  /* Dodatkowy efekt przeźroczystości dla dolnej części - zaczyna się od połowy */
  .phone-frame::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50%;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      rgba(15, 23, 42, 0.05) 10%,
      rgba(15, 23, 42, 0.1) 20%,
      rgba(15, 23, 42, 0.2) 30%,
      rgba(15, 23, 42, 0.4) 50%,
      rgba(15, 23, 42, 0.6) 70%,
      rgba(15, 23, 42, 0.8) 100%
    );
    pointer-events: none;
    z-index: 1;
  }

  /* Phone Status Bar */
  .phone-status-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 1rem;
    background: rgba(0, 0, 0, 0.2);
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    font-size: 0.75rem;
    color: white;
    font-weight: 600;
    position: relative;
    z-index: 2;
  }

  .status-left .time {
    color: white;
  }

  .status-right {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .signal-bars {
    display: flex;
    gap: 2px;
    align-items: end;
  }

  .signal-bars .bar {
    width: 3px;
    background: white;
    border-radius: 1px;
  }

  .signal-bars .bar:nth-child(1) { height: 4px; }
  .signal-bars .bar:nth-child(2) { height: 6px; }
  .signal-bars .bar:nth-child(3) { height: 8px; }
  .signal-bars .bar:nth-child(4) { height: 10px; }

  .battery {
    width: 20px;
    height: 10px;
    border: 1px solid white;
    border-radius: 2px;
    position: relative;
  }

  .battery::after {
    content: '';
    position: absolute;
    right: -3px;
    top: 2px;
    width: 2px;
    height: 6px;
    background: white;
    border-radius: 0 1px 1px 0;
  }

  .battery-level {
    width: 80%;
    height: 100%;
    background: white;
    border-radius: 1px;
  }

  /* Phone Header */
  .phone-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    position: relative;
    z-index: 2;
  }

  .phone-logo {
    display: flex;
    align-items: center;
  }

  .phone-title {
    color: white;
    font-size: 1.125rem;
    font-weight: 600;
    flex: 1;
    text-align: center;
  }

  .phone-menu {
    display: flex;
    gap: 0.25rem;
  }

  .menu-dot {
    width: 4px;
    height: 4px;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 50%;
  }

  /* Phone Content */
  .phone-content {
    flex: 1;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    overflow-y: auto;
    position: relative;
    z-index: 2;
  }

  /* Mobile Feature Display */
  .mobile-feature-display {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 0.75rem;
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    opacity: 0;
    transform: translateY(10px);
  }

  .mobile-feature-display.fade-in {
    opacity: 1;
    transform: translateY(0);
  }

  .mobile-feature-display.fade-out {
    opacity: 0;
    transform: translateY(-10px);
  }

  .mobile-feature-icon {
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(245, 158, 11, 0.1);
    border-radius: 0.5rem;
    color: #f59e0b;
  }

  .mobile-feature-content {
    flex: 1;
  }

  .mobile-feature-title {
    color: white;
    font-weight: 600;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }

  .mobile-feature-description {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.75rem;
    line-height: 1.3;
  }

  /* Mobile Content Grid */
  .mobile-content-grid {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .mobile-content-card {
    height: 60px;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 0.5rem;
    animation: skeletonPulse 2s ease-in-out infinite;
    position: relative;
    overflow: hidden;
  }

  .mobile-content-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, 
      rgba(245, 158, 11, 0.1) 0%, 
      rgba(245, 158, 11, 0.05) 50%, 
      rgba(245, 158, 11, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.4s;
  }

  .mobile-content-card:hover::before {
    opacity: 1;
  }

  /* Mobile Bottom Area */
  .mobile-bottom-area {
    margin-top: auto;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.02);
    border-radius: 0.5rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .mobile-skeleton-lines {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .mobile-skeleton-line {
    height: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.25rem;
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  .mobile-skeleton-line-sm {
    width: 60%;
  }

  /* Phone Bottom Navigation */
  .phone-bottom-nav {
    display: flex;
    justify-content: space-around;
    padding: 0.75rem;
    background: rgba(0, 0, 0, 0.2);
    border-top: 1px solid rgba(255, 255, 255, 0.05);
    position: relative;
    z-index: 2;
  }

  .nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.3s;
    cursor: pointer;
  }

  .nav-item.active {
    background: rgba(245, 158, 11, 0.1);
    color: #f59e0b;
  }

  .nav-item:hover:not(.active) {
    background: rgba(255, 255, 255, 0.05);
  }

  .nav-icon {
    font-size: 1.25rem;
  }

  /* Mobile AI Module Content Styles */
  .mobile-ai-module-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    opacity: 0;
    transform: scale(0.8) rotate(-2deg);
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    z-index: 1;
  }

  .mobile-ai-module-content.animate-in {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }

  .mobile-ai-module-header {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    margin-bottom: 0.375rem;
  }

  .mobile-ai-module-icon {
    font-size: 0.875rem;
    width: 1.25rem;
    height: 1.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(245, 158, 11, 0.2);
    border-radius: 0.25rem;
  }

  .mobile-ai-module-title {
    color: white;
    font-weight: 600;
    font-size: 0.625rem;
    flex: 1;
  }

  .mobile-attachment-indicator {
    position: relative;
    display: flex;
    align-items: center;
  }

  .mobile-attachment-line {
    width: 8px;
    height: 1px;
    background: linear-gradient(90deg, rgba(245, 158, 11, 0.6), transparent);
    border-radius: 1px;
  }

  .mobile-attachment-dot {
    width: 3px;
    height: 3px;
    background: #f59e0b;
    border-radius: 50%;
    margin-left: 1px;
  }

  .mobile-attachment-dot.pulsing {
    animation: attachmentPulse 2s ease-in-out infinite;
  }

  .mobile-ai-module-body {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
  }

  .mobile-ai-module-value {
    color: white;
    font-weight: 700;
    font-size: 0.75rem;
  }

  .mobile-ai-module-label {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.5rem;
  }

  .mobile-ai-module-chart {
    height: 16px;
    display: flex;
    align-items: end;
    justify-content: center;
    margin-top: 0.125rem;
  }

  .mobile-mini-chart {
    display: flex;
    align-items: end;
    gap: 1px;
    height: 100%;
  }

  .mobile-mini-chart .chart-bar {
    width: 2px;
    background: linear-gradient(to top, 
      rgba(245, 158, 11, 0.4), 
      rgba(245, 158, 11, 0.8));
    border-radius: 1px 1px 0 0;
    animation: chartGrow 1s ease-out;
  }

  /* Mobile Skeleton Content Styles */
  .mobile-skeleton-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    z-index: 1;
  }

  .mobile-skeleton-icon {
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.5rem;
    flex-shrink: 0;
  }

  .mobile-skeleton-icon svg {
    color: rgba(255, 255, 255, 0.4);
    width: 16px;
    height: 16px;
  }

  .mobile-skeleton-text {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .mobile-skeleton-line {
    height: 12px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 0.25rem;
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  .mobile-skeleton-title {
    width: 80%;
  }

  .mobile-skeleton-value {
    width: 60%;
    height: 14px;
  }

  .mobile-skeleton-orange {
    background: linear-gradient(135deg, 
      rgba(245, 158, 11, 0.3), 
      rgba(245, 158, 11, 0.5));
    border: 1px solid rgba(245, 158, 11, 0.4);
    animation: skeletonPulseOrange 2s ease-in-out infinite;
  }

  @keyframes skeletonPulseOrange {
    0%, 100% {
      opacity: 1;
      background: linear-gradient(135deg, 
        rgba(245, 158, 11, 0.3), 
        rgba(245, 158, 11, 0.5));
    }
    50% {
      opacity: 0.7;
      background: linear-gradient(135deg, 
        rgba(245, 158, 11, 0.5), 
        rgba(245, 158, 11, 0.7));
    }
  }

  /* Top Bar */
  .app-topbar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    gap: 1rem;
  }

  .topbar-left {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
  }

  .workspace-selector {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .workspace-icon {
    width: 1.5rem;
    height: 1.5rem;
    background: #7C3AED;
    border-radius: 0.375rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .breadcrumbs {
    display: flex;
    align-items: center;
  }

  .topbar-center {
    flex: 1;
    display: flex;
    justify-content: center;
  }

  .search-box {
    width: 100%;
    max-width: 300px;
  }

  .topbar-right {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
    justify-content: flex-end;
  }

  /* App Content */
  .app-content {
    display: flex;
    min-height: 500px;
  }

  /* Sidebar */
  .app-sidebar {
    width: 240px;
    padding: 1rem;
    border-right: 1px solid rgba(255, 255, 255, 0.05);
    display: flex;
    flex-direction: column;
    background: rgba(10, 15, 30, 0.6);
    border-radius: 0.75rem 0 0 0.75rem;
  }

  .sidebar-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }

  .sidebar-brand {
    color: white;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .sidebar-section {
    margin-bottom: 0.75rem;
    padding: 0 0.5rem;
  }

  .sidebar-items {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    margin-bottom: 1.5rem;
  }

  .skeleton-item {
    height: 40px;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.05);
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  .skeleton-item.skeleton-active {
    background: linear-gradient(135deg, rgba(251, 191, 36, 0.3), rgba(245, 158, 11, 0.3));
    border: 1px solid rgba(251, 191, 36, 0.4);
    animation: none;
  }

  .skeleton-item.skeleton-nested {
    margin-left: 1rem;
    width: calc(100% - 1rem);
  }

  .sidebar-footer {
    margin-top: auto;
    padding: 0.5rem;
  }

  .skeleton-upgrade {
    height: 48px;
    border-radius: 0.5rem;
    background: linear-gradient(135deg, rgba(251, 191, 36, 0.4), rgba(245, 158, 11, 0.4));
    border: 1px solid rgba(251, 191, 36, 0.5);
    animation: none;
  }

  /* Main Content */
  .app-main {
    flex: 1;
    padding: 1.5rem;
    overflow: hidden;
  }

  .content-header {
    margin-bottom: 1.5rem;
  }

  /* Feature Display System */
  .feature-display {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 0.75rem;
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    opacity: 0;
    transform: translateY(10px);
    min-height: 80px;
  }

  .feature-display.fade-in {
    opacity: 1;
    transform: translateY(0);
  }

  .feature-display.fade-out {
    opacity: 0;
    transform: translateY(-10px);
  }

  .feature-icon {
    font-size: 2.5rem;
    color: #f59e0b;
    filter: drop-shadow(0 0 8px rgba(245, 158, 11, 0.4));
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
  }

  .feature-icon svg {
    stroke-width: 2;
    filter: blur(0.5px);
    transition: filter 0.3s ease;
    width: 100%;
    height: 100%;
    margin: 0;
    stroke: #f59e0b;
  }

  .feature-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex: 1;
  }

  .feature-title {
    background: linear-gradient(135deg, 
      #fbbf24 0%, 
      #f59e0b 25%,
      #d97706 50%,
      #f59e0b 75%,
      #fbbf24 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    background-size: 200% auto;
    animation: gradientShift 3s ease-in-out infinite;
    font-weight: 700;
    font-size: 2rem;
    line-height: 1.2;
  }

  .feature-description {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.875rem;
    line-height: 1.3;
    font-weight: 400;
  }

  .content-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
    margin-top: 1rem;
  }

  .content-card {
    height: 100px;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.05);
    animation: skeletonPulse 2s ease-in-out infinite;
    animation-delay: 0.1s;
  }

  .content-area {
    padding: 1.5rem;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .skeleton-lines {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .skeleton-line {
    height: 16px;
    border-radius: 0.25rem;
    background: rgba(255, 255, 255, 0.05);
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  .skeleton-line-sm {
    width: 60%;
  }

  .skeleton-line-lg {
    width: 90%;
  }

  /* Skeleton Elements */
  .skeleton-text {
    height: 12px;
    border-radius: 0.25rem;
    background: rgba(255, 255, 255, 0.08);
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  .skeleton-xs {
    width: 60px;
  }

  .skeleton-sm {
    width: 100px;
  }

  .skeleton-md {
    width: 200px;
  }

  .skeleton-lg {
    width: 250px;
  }

  .skeleton-circle {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.08);
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  @keyframes skeletonPulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  /* Trusted Section */
  .trusted-section {
    padding: 3rem 2rem;
    border-top: 1px solid rgba(255, 255, 255, 0.05);
  }

  .trusted-logos {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 3rem;
    flex-wrap: wrap;
    opacity: 0.4;
  }

  .logo-text {
    color: white;
    font-size: 1.25rem;
    font-weight: 600;
  }

  /* Features Section */
  .features-section {
    padding: 6rem 2rem;
  }

  .features-container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-label {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: rgba(59, 130, 246, 0.1);
    border-radius: 2rem;
    color: #60a5fa;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    margin-bottom: 1rem;
  }

  .section-title {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: white;
    margin-bottom: 1rem;
  }

  .section-desc {
    color: rgba(255, 255, 255, 0.6);
    font-size: 1.125rem;
    line-height: 1.6;
  }

  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .feature-card {
    position: relative;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 1rem;
    transition: all 0.4s;
  }

  .feature-card:hover {
    transform: translateY(-8px);
    background: rgba(255, 255, 255, 0.04);
    border-color: rgba(59, 130, 246, 0.3);
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2);
  }

  .feature-icon {
    width: 3.5rem;
    height: 3.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    border-radius: 0.75rem;
    color: #60a5fa;
  }

  .feature-icon svg {
    width: 2rem;
    height: 2rem;
  }

  .feature-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: white;
    margin-bottom: 0.75rem;
  }

  .feature-desc {
    color: rgba(255, 255, 255, 0.6);
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .feature-btn {
    padding: 0.5rem 1.5rem;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
    color: #60a5fa;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
  }

  .feature-btn:hover {
    background: rgba(59, 130, 246, 0.2);
  }

  /* Section Background */
  .section-bg {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none;
  }

  .section-bg .bg-gradient {
    display: none;
  }

  .section-bg .bg-grid {
    display: none;
  }

  /* Full Sections */
  .full-section {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    padding: 6rem 2rem;
    opacity: 0;
    transform: translateY(50px);
    transition: opacity 1s ease, transform 1s ease;
  }

  .full-section.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .section-container {
    max-width: 1400px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    width: 100%;
    position: relative;
    z-index: 1;
  }

  .section-container.reverse {
    direction: rtl;
  }

  .section-container.reverse > * {
    direction: ltr;
  }

  .section-container.centered {
    grid-template-columns: 1fr;
    text-align: center;
  }


  .section-heading {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 700;
    line-height: 1.2;
    color: white;
    margin-bottom: 2rem;
  }

  .section-heading-large {
    font-size: clamp(3rem, 6vw, 5rem);
    font-weight: 700;
    line-height: 1.1;
    color: white;
    margin-bottom: 2rem;
  }

  .heading-gradient {
    background: linear-gradient(135deg, #60a5fa, #a78bfa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .section-text {
    font-size: 1.125rem;
    line-height: 1.8;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 2rem;
  }

  .section-text-center {
    font-size: 1.25rem;
    line-height: 1.8;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 3rem;
  }

  .section-stats {
    display: flex;
    gap: 3rem;
    margin-top: 2rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
  }

  .stat-number {
    font-size: 3rem;
    font-weight: 900;
    background: linear-gradient(135deg, #60a5fa, #a78bfa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .stat-label {
    color: rgba(255, 255, 255, 0.6);
    font-size: 1rem;
  }

  .section-list {
    list-style: none;
    padding: 0;
    margin: 2rem 0;
  }

  .section-list li {
    font-size: 1.125rem;
    color: rgba(255, 255, 255, 0.8);
    padding: 0.75rem 0;
  }



  .app-preview {
    background: rgba(15, 23, 42, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    backdrop-filter: blur(10px);
    overflow: hidden;
    margin-bottom: 1.5rem;
  }

  .preview-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }

  .preview-logo {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
  }

  .preview-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(34, 197, 94, 0.8);
    font-size: 0.875rem;
    font-weight: 500;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    background: #22c55e;
    border-radius: 50%;
    animation: statusPulse 2s ease-in-out infinite;
  }

  @keyframes statusPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .preview-content {
    display: flex;
    min-height: 300px;
  }

  .preview-sidebar {
    width: 180px;
    padding: 1rem;
    background: rgba(10, 15, 30, 0.6);
    border-right: 1px solid rgba(255, 255, 255, 0.05);
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sidebar-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border-radius: 0.5rem;
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.875rem;
    transition: all 0.3s;
  }

  .sidebar-item.active {
    background: rgba(251, 191, 36, 0.1);
    border: 1px solid rgba(251, 191, 36, 0.2);
    color: #fbbf24;
  }

  .sidebar-item:hover:not(.active) {
    background: rgba(255, 255, 255, 0.05);
    color: white;
  }

  .item-icon {
    font-size: 1rem;
  }

  .preview-main {
    flex: 1;
    padding: 1.5rem;
  }

  .main-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.5rem;
  }

  .main-header h3 {
    color: white;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }

  .ai-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #fbbf24;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .ai-pulse {
    width: 8px;
    height: 8px;
    background: #fbbf24;
    border-radius: 50%;
    animation: aiPulse 1.5s ease-in-out infinite;
  }

  @keyframes aiPulse {
    0%, 100% { 
      opacity: 1;
      transform: scale(1);
    }
    50% { 
      opacity: 0.6;
      transform: scale(1.2);
    }
  }

  .preview-cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .preview-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 0.75rem;
    transition: all 0.3s;
  }

  .preview-card:hover {
    background: rgba(255, 255, 255, 0.05);
    transform: translateY(-2px);
  }

  .card-icon {
    font-size: 1.5rem;
  }

  .card-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .card-value {
    color: white;
    font-weight: 700;
    font-size: 1.125rem;
  }

  .card-label {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.875rem;
  }

  .preview-chart {
    height: 80px;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 0.5rem;
    padding: 1rem;
    display: flex;
    align-items: end;
    justify-content: center;
    gap: 0.5rem;
  }

  .chart-bars {
    display: flex;
    align-items: end;
    gap: 0.5rem;
    height: 100%;
  }

  .chart-bar {
    width: 12px;
    background: linear-gradient(to top, rgba(251, 191, 36, 0.6), rgba(245, 158, 11, 0.8));
    border-radius: 2px 2px 0 0;
    animation: chartGrow 2s ease-out;
  }

  @keyframes chartGrow {
    0% { height: 0; }
    100% { height: var(--bar-height); }
  }

  /* Media Placeholder */
  .media-placeholder {
    position: relative;
    height: 200px;
    background: rgba(255, 255, 255, 0.02);
    border: 2px dashed rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s;
    overflow: hidden;
  }

  .media-placeholder:hover {
    border-color: rgba(251, 191, 36, 0.3);
    background: rgba(251, 191, 36, 0.05);
    transform: scale(1.02);
  }

  .placeholder-content {
    text-align: center;
    color: rgba(255, 255, 255, 0.6);
  }

  .placeholder-content .play-icon {
    width: 3rem;
    height: 3rem;
    margin: 0 auto 1rem;
    color: #fbbf24;
  }

  .placeholder-content span {
    display: block;
    font-weight: 600;
    font-size: 1.125rem;
    color: white;
    margin-bottom: 0.5rem;
  }

  .placeholder-content p {
    font-size: 0.875rem;
    margin: 0;
  }

  /* Content Grid AI Modules Styles */
  .base-content {
    margin-bottom: 1rem;
  }

  .content-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .content-card {
    position: relative;
    height: 100px;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.05);
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    overflow: hidden;
  }

  .content-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, 
      rgba(251, 191, 36, 0.1) 0%, 
      rgba(245, 158, 11, 0.05) 50%, 
      rgba(217, 119, 6, 0.1) 100%);
    opacity: 0;
    transition: opacity 0.4s;
    z-index: 0;
  }

  .content-card:hover::before {
    opacity: 1;
  }

  .content-card:hover {
    transform: translateY(-3px) scale(1.02);
    border-color: rgba(251, 191, 36, 0.3);
    box-shadow: 0 6px 20px rgba(251, 191, 36, 0.2);
  }

  .card-skeleton {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.05);
    animation: skeletonPulse 2s ease-in-out infinite;
  }

  /* AI Module Content Styles */
  .ai-module-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 0.75rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    opacity: 0;
    transform: scale(0.8) rotate(-3deg);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    z-index: 1;
  }

  .ai-module-content.animate-in {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }

  .ai-module-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .ai-module-icon {
    font-size: 1rem;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(251, 191, 36, 0.2);
    border-radius: 0.375rem;
  }

  .ai-module-title {
    color: white;
    font-weight: 600;
    font-size: 0.75rem;
    flex: 1;
  }

  .attachment-indicator {
    position: relative;
    display: flex;
    align-items: center;
  }

  .attachment-line {
    width: 12px;
    height: 1px;
    background: linear-gradient(90deg, rgba(251, 191, 36, 0.6), transparent);
    border-radius: 1px;
  }

  .attachment-dot {
    width: 4px;
    height: 4px;
    background: #fbbf24;
    border-radius: 50%;
    margin-left: 2px;
  }

  .attachment-dot.pulsing {
    animation: attachmentPulse 2s ease-in-out infinite;
  }

  @keyframes attachmentPulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.6;
      transform: scale(1.3);
    }
  }

  .ai-module-body {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .ai-module-value {
    color: white;
    font-weight: 700;
    font-size: 0.875rem;
  }

  .ai-module-label {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.625rem;
  }

  .ai-module-chart {
    height: 20px;
    display: flex;
    align-items: end;
    justify-content: center;
    margin-top: 0.25rem;
  }

  .mini-chart {
    display: flex;
    align-items: end;
    gap: 2px;
    height: 100%;
  }

  .mini-chart .chart-bar {
    width: 3px;
    background: linear-gradient(to top, 
      rgba(251, 191, 36, 0.4), 
      rgba(245, 158, 11, 0.8));
    border-radius: 1px 1px 0 0;
    animation: chartGrow 1.2s ease-out;
  }

  @keyframes chartGrow {
    0% { height: 0; }
    100% { height: var(--bar-height); }
  }

  /* Gentle attachment animation */
  .content-card.attaching {
    animation: gentleAttachModule 2.5s ease-out forwards;
  }

  @keyframes gentleAttachModule {
    0% {
      transform: scale(0.7) translateY(-20px) rotate(-8deg);
      opacity: 0.3;
    }
    30% {
      transform: scale(0.85) translateY(-8px) rotate(-4deg);
      opacity: 0.6;
    }
    60% {
      transform: scale(0.95) translateY(-2px) rotate(-1deg);
      opacity: 0.8;
    }
    100% {
      transform: scale(1) translateY(0) rotate(0deg);
      opacity: 1;
    }
  }


  .section-visual {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .visual-card {
    width: 300px;
    height: 300px;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
  }

  .visual-card.large {
    width: 400px;
    height: 400px;
  }

  .visual-card::before {
    content: '';
    position: absolute;
    inset: -50%;
    background: conic-gradient(from 0deg, transparent, rgba(59, 130, 246, 0.3), transparent);
    animation: rotate 4s linear infinite;
  }

  @keyframes rotate {
    100% { transform: rotate(360deg); }
  }

  .visual-icon {
    width: 8rem;
    height: 8rem;
    color: rgba(59, 130, 246, 0.8);
    position: relative;
    z-index: 1;
  }

  .section-content-full {
    max-width: 1000px;
    margin: 0 auto;
  }

  /* Responsive */
  @media (max-width: 640px) {
    .nav-menu {
      display: none;
    }

    .mobile-menu-btn {
      display: block;
    }

    .section-container {
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    .section-container.reverse {
      direction: ltr;
    }

    .app-mockup {
      max-width: 800px;
    }

    .app-window {
      transform: scale(0.9);
    }
  }

  @media (max-width: 768px) {
    .hero-container {
      padding: 2rem 1rem;
    }

    .hero-section {
      min-height: 100vh;
      height: auto;
      margin-top: 4rem;
    }

    .hero-title {
      font-size: clamp(1.5rem, 4vw, 2rem);
      width: 90%;
      margin: 0 auto 1rem auto;
    }

    .title-highlight {
      font-size: clamp(1.8rem, 5vw, 2.5rem);
    }

    .mobile-break {
      display: block;
    }

    .hero-subtitle {
      font-size: clamp(0.875rem, 3vw, 1rem);
      margin-bottom: 2rem;
      width: 90%;
      margin-left: auto;
      margin-right: auto;
      padding: 0 1rem;
    }

    .hero-cta {
      flex-direction: column;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .btn-primary,
    .btn-secondary {
      width: 100%;
      max-width: 320px;
      justify-content: center;
    }

    /* Mobile Mockup Visibility */
    .desktop-mockup {
      display: none;
    }

    .mobile-mockup {
      display: block;
    }

    /* Mobile Phone Mockup Adjustments */
    .app-mockup {
      max-width: 100%;
      margin: 0 auto;
      margin-top: 1rem;
    }

    .phone-frame {
      width: 300px;
      height: 600px;
      margin: 0 auto;
    }

    /* Mobile Feature Display Animation */
    .mobile-feature-display {
      animation: mobileFeatureFadeIn 0.8s ease-out forwards;
    }

    @keyframes mobileFeatureFadeIn {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Mobile Content Cards Animation */
    .mobile-content-card {
      animation: mobileCardSlideIn 0.6s ease-out forwards;
    }

    .mobile-content-card:nth-child(1) { animation-delay: 0.1s; }
    .mobile-content-card:nth-child(2) { animation-delay: 0.2s; }
    .mobile-content-card:nth-child(3) { animation-delay: 0.3s; }

    @keyframes mobileCardSlideIn {
      0% {
        opacity: 0;
        transform: translateX(-20px);
      }
      100% {
        opacity: 1;
        transform: translateX(0);
      }
    }

    /* Mobile Bottom Navigation Animation */
    .phone-bottom-nav {
      animation: mobileNavSlideUp 0.8s ease-out forwards;
      animation-delay: 0.5s;
      opacity: 0;
      transform: translateY(20px);
    }

    @keyframes mobileNavSlideUp {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
  }

  @media (max-width: 480px) {
    .hero-container {
      padding: 1.5rem 0.75rem;
    }

    .hero-section {
      min-height: 1000px;
    }

    .app-mockup {
      transform: scale(0.8);
    }

    .btn-primary,
    .btn-secondary {
      padding: 0.75rem 1.5rem;
      font-size: 0.875rem;
    }

    .update-badge {
      font-size: 0.75rem;
      padding: 0.375rem 0.75rem;
    }

    .badge-icon {
      width: 0.875rem;
      height: 0.875rem;
    }
  }
</style>

<script>
  // Advanced Parallax and Section Animation Controller
  class SectionAnimator {
    sections: NodeListOf<Element>;
    observer!: IntersectionObserver;

    constructor() {
      this.sections = document.querySelectorAll('.full-section');
      this.init();
    }

    init() {
      // Add intersection observer for scroll-based animations
      const observerOptions = {
        threshold: 0.15,
        rootMargin: '0px 0px -50px 0px'
      };

      this.observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
            // Add staggered animation for content
            const content = entry.target.querySelector('.section-content');
            if (content) {
              setTimeout(() => {
                content.classList.add('animate-in');
              }, 200);
            }
          }
        });
      }, observerOptions);

      // Observe all sections
      this.sections.forEach(section => {
        this.observer.observe(section);
      });

      // Parallax effect on scroll
      this.handleParallax();
    }

    handleParallax() {
      let ticking = false;

      const updateParallax = () => {
        const scrollY = window.pageYOffset;
        
        this.sections.forEach((section: Element, index: number) => {
          const rect = section.getBoundingClientRect();
          const sectionTop = rect.top + scrollY;
          const sectionHeight = rect.height;
          const windowHeight = window.innerHeight;
          
          // Calculate parallax offset based on section position
          const parallaxOffset = (scrollY - sectionTop + windowHeight) * 0.15;
          
          // Apply different parallax effects to backgrounds
          const bgElement = section.querySelector('.section-bg') as HTMLElement;
          if (bgElement) {
            const baseOffset = this.getBaseParallaxOffset(index);
            bgElement.style.transform = `translateY(${baseOffset + parallaxOffset * 0.3}px)`;
          }

          // Add subtle rotation based on scroll position
          const rotationFactor = Math.sin(scrollY * 0.001) * 0.5;
          (section as HTMLElement).style.transform = `rotate(${rotationFactor}deg)`;
        });
        
        ticking = false;
      };

      const requestTick = () => {
        if (!ticking) {
          requestAnimationFrame(updateParallax);
          ticking = true;
        }
      };

      window.addEventListener('scroll', requestTick, { passive: true });
    }

    getBaseParallaxOffset(index: number): number {
      const offsets = [-20, 20, -10, 15, -25];
      return offsets[index] || 0;
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SectionAnimator();
  });


  function isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  function showNotification(message: string, type: 'success' | 'error') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    // Style the notification
    Object.assign(notification.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      padding: '1rem 1.5rem',
      borderRadius: '0.5rem',
      color: 'white',
      fontWeight: '600',
      zIndex: '10000',
      transform: 'translateX(100%)',
      transition: 'transform 0.3s ease',
      background: type === 'success' 
        ? 'linear-gradient(135deg, #22c55e, #16a34a)' 
        : 'linear-gradient(135deg, #ef4444, #dc2626)',
      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.3)'
    });
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 4 seconds
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 4000);
  }

    // Add click handler for media placeholder
    document.addEventListener('DOMContentLoaded', () => {

    // Initialize mockup AI modules animation
    initializeMockupAIModules();
    
    // Initialize feature display system
    initializeFeatureDisplay();
  });

  // Content Grid AI Modules Animation Controller
  function initializeMockupAIModules() {
    const modulesData = [
      {
        icon: '🤖',
        title: 'AI Assistant',
        value: '+15.3%',
        label: 'Efficiency',
        chartHeights: [40, 60, 80],
        delay: 3000
      },
      {
        icon: '📊',
        title: 'Analytics AI',
        value: '94.2%',
        label: 'Accuracy',
        chartHeights: [70, 85, 94],
        delay: 5000
      },
      {
        icon: '⚡',
        title: 'Process AI',
        value: '87%',
        label: 'Automated',
        chartHeights: [60, 75, 87],
        delay: 7000
      }
    ];

    // Check if we're on mobile or desktop
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
      // Initialize mobile AI modules
      initializeMobileAIModules(modulesData);
    } else {
      // Initialize desktop AI modules
      modulesData.forEach((moduleData, index) => {
        setTimeout(() => {
          attachAIModuleToCard(moduleData, index, index === modulesData.length - 1);
        }, moduleData.delay);
      });

      // Add more modules periodically
      setTimeout(() => {
        addAdditionalAIModules();
      }, 12000);
    }
  }

  // Mobile AI Modules Animation Controller - wyłączone, używamy skeleton loaderów
  function initializeMobileAIModules(modulesData: any[]) {
    // Skeleton loadery są już w HTML, nie potrzebujemy dynamicznego dodawania treści
    console.log('Mobile AI modules: using skeleton loaders instead of dynamic content');
  }

  function attachMobileAIModuleToCard(moduleData: any, cardIndex: number, isLast: boolean = false) {
    const mobileContentGrid = document.getElementById('mobile-content-grid');
    
    if (!mobileContentGrid) return;

    const cards = mobileContentGrid.querySelectorAll('.mobile-content-card');
    const targetCard = cards[cardIndex] as HTMLElement;
    
    if (!targetCard) return;

    // Add attaching animation to the card
    targetCard.classList.add('attaching');

    const chartBars = moduleData.chartHeights.map((height: number) => 
      `<div class="chart-bar" style="height: ${height}%"></div>`
    ).join('');

    // Create mobile AI module content
    const mobileAIModuleContent = document.createElement('div');
    mobileAIModuleContent.className = 'mobile-ai-module-content';
    mobileAIModuleContent.innerHTML = `
      <div class="mobile-ai-module-header">
        <div class="mobile-ai-module-icon">${moduleData.icon}</div>
        <div class="mobile-ai-module-title">${moduleData.title}</div>
        <div class="mobile-attachment-indicator">
          <div class="mobile-attachment-line"></div>
          <div class="mobile-attachment-dot ${isLast ? 'pulsing' : ''}"></div>
        </div>
      </div>
      <div class="mobile-ai-module-body">
        <div class="mobile-ai-module-value">${moduleData.value}</div>
        <div class="mobile-ai-module-label">${moduleData.label}</div>
        <div class="mobile-ai-module-chart">
          <div class="mobile-mini-chart">
            ${chartBars}
          </div>
        </div>
      </div>
    `;

    targetCard.appendChild(mobileAIModuleContent);

    // Add click handler
    targetCard.addEventListener('click', () => {
      showNotification(`Otwieranie ${moduleData.title}...`, 'success');
    });

    // Animate mobile AI content in after card animation
    setTimeout(() => {
      targetCard.classList.remove('attaching');
      mobileAIModuleContent.classList.add('animate-in');
    }, 2000);
  }

  function attachAIModuleToCard(moduleData: any, cardIndex: number, isLast: boolean = false) {
    const contentGrid = document.getElementById('content-grid');
    const aiCountElement = document.getElementById('ai-modules-count');
    
    if (!contentGrid || !aiCountElement) return;

    const cards = contentGrid.querySelectorAll('.content-card');
    const targetCard = cards[cardIndex] as HTMLElement;
    
    if (!targetCard) return;

    // Add attaching animation to the card
    targetCard.classList.add('attaching');

    const chartBars = moduleData.chartHeights.map((height: number) => 
      `<div class="chart-bar" style="height: ${height}%"></div>`
    ).join('');

    // Create AI module content
    const aiModuleContent = document.createElement('div');
    aiModuleContent.className = 'ai-module-content';
    aiModuleContent.innerHTML = `
      <div class="ai-module-header">
        <div class="ai-module-icon">${moduleData.icon}</div>
        <div class="ai-module-title">${moduleData.title}</div>
        <div class="attachment-indicator">
          <div class="attachment-line"></div>
          <div class="attachment-dot ${isLast ? 'pulsing' : ''}"></div>
        </div>
      </div>
      <div class="ai-module-body">
        <div class="ai-module-value">${moduleData.value}</div>
        <div class="ai-module-label">${moduleData.label}</div>
        <div class="ai-module-chart">
          <div class="mini-chart">
            ${chartBars}
          </div>
        </div>
      </div>
    `;

    // Hide skeleton and add AI content
    const skeleton = targetCard.querySelector('.card-skeleton') as HTMLElement;
    if (skeleton) {
      skeleton.style.opacity = '0';
    }

    targetCard.appendChild(aiModuleContent);

    // Update AI modules count
    const currentCount = parseInt(aiCountElement.textContent?.replace(/\D/g, '') || '0');
    aiCountElement.textContent = `${currentCount + 1} AI Modules`;

    // Add click handler
    targetCard.addEventListener('click', () => {
      showNotification(`Otwieranie ${moduleData.title}...`, 'success');
    });

    // Animate AI content in after card animation
    setTimeout(() => {
      targetCard.classList.remove('attaching');
      aiModuleContent.classList.add('animate-in');
    }, 2000);
  }

  function addAdditionalAIModules() {
    const additionalModules = [
      {
        icon: '🧠',
        title: 'Neural AI',
        value: '98.5%',
        label: 'Learning',
        chartHeights: [80, 90, 98]
      },
      {
        icon: '🎯',
        title: 'Target AI',
        value: '+23.1%',
        label: 'Precision',
        chartHeights: [70, 85, 95]
      }
    ];

    // Find available cards (those without AI modules)
    const contentGrid = document.getElementById('content-grid');
    if (!contentGrid) return;

    const cards = contentGrid.querySelectorAll('.content-card');
    let availableCardIndex = 0;

    additionalModules.forEach((moduleData, index) => {
      // Find next available card
      while (availableCardIndex < cards.length && 
             cards[availableCardIndex].querySelector('.ai-module-content')) {
        availableCardIndex++;
      }

      if (availableCardIndex < cards.length) {
        setTimeout(() => {
          attachAIModuleToCard(moduleData, availableCardIndex, index === additionalModules.length - 1);
          availableCardIndex++;
        }, index * 3000);
      }
    });
  }

  // Feature Display System Controller
  function initializeFeatureDisplay() {
    const features = JSON.parse(document.getElementById('hero-features-data')?.textContent || '[]');

    // Check if we're on mobile or desktop
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
      initializeMobileFeatureDisplay(features);
    } else {
      initializeDesktopFeatureDisplay(features);
    }
  }

  function initializeDesktopFeatureDisplay(features: any[]) {
    const featureDisplay = document.getElementById('feature-display-1');
    if (!featureDisplay) return;

    let currentFeatureIndex = 0;
    let isTransitioning = false;

    function showNextFeature() {
      if (isTransitioning || !featureDisplay) return;
      
      isTransitioning = true;
      
      // Fade out current feature
      featureDisplay.classList.remove('fade-in');
      featureDisplay.classList.add('fade-out');
      
      setTimeout(() => {
        if (!featureDisplay) return;
        
        // Select random feature (different from current)
        let nextIndex;
        do {
          nextIndex = Math.floor(Math.random() * features.length);
        } while (nextIndex === currentFeatureIndex && features.length > 1);
        
        currentFeatureIndex = nextIndex;
        const feature = features[currentFeatureIndex];
        
        // Update content
        const iconElement = featureDisplay.querySelector('.feature-icon');
        const titleElement = featureDisplay.querySelector('.feature-title');
        const descriptionElement = featureDisplay.querySelector('.feature-description');
        
        if (iconElement && titleElement && descriptionElement) {
          iconElement.innerHTML = feature.icon;
          titleElement.textContent = feature.title;
          descriptionElement.textContent = feature.description;
        }
        
        // Fade in new feature
        featureDisplay.classList.remove('fade-out');
        featureDisplay.classList.add('fade-in');
        
        setTimeout(() => {
          isTransitioning = false;
        }, 600);
        
      }, 600);
    }

    // Start with first feature
    const firstFeature = features[0];
    const iconElement = featureDisplay.querySelector('.feature-icon');
    const titleElement = featureDisplay.querySelector('.feature-title');
    const descriptionElement = featureDisplay.querySelector('.feature-description');
    
    if (iconElement && titleElement && descriptionElement) {
      iconElement.innerHTML = firstFeature.icon;
      titleElement.textContent = firstFeature.title;
      descriptionElement.textContent = firstFeature.description;
    }
    
    // Fade in initial feature
    setTimeout(() => {
      featureDisplay.classList.add('fade-in');
    }, 1000);

    // Start cycling through features
    setTimeout(() => {
      showNextFeature();
      
      // Continue cycling every 3-5 seconds
      setInterval(() => {
        showNextFeature();
      }, 3000 + Math.random() * 2000);
    }, 4000);
  }

  function initializeMobileFeatureDisplay(features: any[]) {
    const mobileFeatureDisplay = document.getElementById('mobile-feature-display-1');
    if (!mobileFeatureDisplay) return;

    let currentFeatureIndex = 0;
    let isTransitioning = false;

    function showNextMobileFeature() {
      if (isTransitioning || !mobileFeatureDisplay) return;
      
      isTransitioning = true;
      
      // Fade out current feature
      mobileFeatureDisplay.classList.remove('fade-in');
      mobileFeatureDisplay.classList.add('fade-out');
      
      setTimeout(() => {
        if (!mobileFeatureDisplay) return;
        
        // Select random feature (different from current)
        let nextIndex;
        do {
          nextIndex = Math.floor(Math.random() * features.length);
        } while (nextIndex === currentFeatureIndex && features.length > 1);
        
        currentFeatureIndex = nextIndex;
        const feature = features[currentFeatureIndex];
        
        // Update content
        const iconElement = mobileFeatureDisplay.querySelector('.mobile-feature-icon');
        const titleElement = mobileFeatureDisplay.querySelector('.mobile-feature-title');
        const descriptionElement = mobileFeatureDisplay.querySelector('.mobile-feature-description');
        
        if (iconElement && titleElement && descriptionElement) {
          iconElement.innerHTML = feature.icon;
          titleElement.textContent = feature.title;
          descriptionElement.textContent = feature.description;
        }
        
        // Fade in new feature
        mobileFeatureDisplay.classList.remove('fade-out');
        mobileFeatureDisplay.classList.add('fade-in');
        
        setTimeout(() => {
          isTransitioning = false;
        }, 600);
        
      }, 600);
    }

    // Start with first feature
    const firstFeature = features[0];
    const iconElement = mobileFeatureDisplay.querySelector('.mobile-feature-icon');
    const titleElement = mobileFeatureDisplay.querySelector('.mobile-feature-title');
    const descriptionElement = mobileFeatureDisplay.querySelector('.mobile-feature-description');
    
    if (iconElement && titleElement && descriptionElement) {
      iconElement.innerHTML = firstFeature.icon;
      titleElement.textContent = firstFeature.title;
      descriptionElement.textContent = firstFeature.description;
    }
    
    // Fade in initial feature
    setTimeout(() => {
      mobileFeatureDisplay.classList.add('fade-in');
    }, 1000);

    // Start cycling through features
    setTimeout(() => {
      showNextMobileFeature();
      
      // Continue cycling every 3-5 seconds
      setInterval(() => {
        showNextMobileFeature();
      }, 3000 + Math.random() * 2000);
    }, 4000);
  }
</script>

<!-- Hidden data for JavaScript -->
<script id="hero-features-data" type="application/json" set:html={JSON.stringify(translations.hero.features.items)}></script>
